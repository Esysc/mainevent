#!/usr/bin/env node

/**
 * `tail` source files listed in app/config.js.
 *
 * process.send() is occasionally used to coordinate flow with test scripts.
 */

'use strict';

(function() {
  var program = require('commander');
  program
    .option('-c, --config <file>', '/path/to/config.js', null)
    .option('-t, --test <#>', 'Exit after # expected lines for unit tests', Number, 0)
    .option('-q, --quiet', '')
    .option('-v, --verbose', '')
    .parse(process.argv);

  require(__dirname + '/../app/modules/mainevent.js');
  var spawn = require('child_process').spawn,
      exec = require('child_process').exec,
      config = mainevent.getConfig(program.config),
      parsers = mainevent.requireModule('parsers'),
      procLog = mainevent.createUtilLogger('tail.js');

  // To support maximum line count for --test.
  var lineCount = 0;

  // To support restart tests.
  var startCount = 0;

  /**
   * Configure the monitor.
   */
  var Monitor = function(source) {
    // Log source attribute object from config/app.js 'sources' list.
    this.source = _.clone(source);

    // ChildProcess object.
    this.tail = null;

    // stdout logger.
    this.log = mainevent.createUtilLogger(this.source.path, program.quiet);

    // MongoDB instance.
    this.mongodb = mainevent.requireModule('mongodb').createInstance();

    // For use in spawn() or exec().
    this.tailArgs = ['--bytes=0', '-F', this.source.path];
    if (program.test) {
      this.tailArgs.push('-v');  // Header output will trigger MONITORS_STARTED.
    }

    // Remote `tail` PID.
    this.remotePid = null;

    // Source-specific parser instance.
    this.parser = parsers.createInstance(this.source.parser);

    // Recent `tail` output which contains a partial log line, left over from
    // the the last extractLines() run. It will be prepended to the next `tail`
    // output chunk, which most likely will complete the line started by the overflow.
    // This prevents parseAndInsert() from receiving unparsable lines.
    this.overflow = '';

    _.bindAll(this);

    // Insertion queue.
    this.queues = {
      insert: async.queue(this.insertWorker, 1),
      data: async.queue(this.dataWorker, 1)
    }
  };

  /**
   * Build an SSH command argument list.
   *
   * - For use with spawn() or exec().
   *
   * @param cmdArgs {Array} Remote command arguments.
   * @return {Array}
   */
  Monitor.prototype.buildSshCmd = function(cmdArgs) {
    return [
      '-t',
      '-p', this.source.sshPort,
      '-i', this.source.sshKey,
      this.source.sshUser + '@' + this.source.sshHost,
    ].concat(cmdArgs);
  };

  /**
   * Run `pgrep` to save the remote monitor's PID.
   */
  Monitor.prototype.saveRemotePid = function(callback) {
    callback = callback || function() {};
    var cmd = this.buildSshCmd(['\'pgrep -f "^tail ' + this.tailArgs.join(' ') + '"\'']),
        monitor = this;
    exec('ssh ' + cmd.join(' '), {}, function(code, stdout) {
      monitor.remotePid = parseInt(stdout.toString(), 10);
      if (program.verbose) {
        monitor.log('remote pid %d', monitor.remotePid);
      };
      callback();
    });
  };

  /**
   * Queue worker which inserts a parsable line extracted from a `tail` output chunk.
   *
   * @param {String} line Parsable line.
   * @param {Function} workDone Fires after work completes.
   */
  Monitor.prototype.insertWorker = function(line, workDone) {
    var monitor = this;
    var sourceLines = {source: this.source, lines: [line]};
    var bulk = true;

    parsers.parseAndInsert(this.mongodb, sourceLines, function() {
      lineCount++;

      if (program.verbose) {
        monitor.log(
          'inserted: count=%d line=%s length=%d',
          lineCount, line, line.length
        );
      }

      // Support maximum line count for --test.
      if (program.test > 0 && lineCount >= program.test) {
        // In most cases the test script will respond by killing this process.
        process.send('TEST_BATCH_ENDED');
      }

      workDone();
    }, bulk);
  };

  /**
   * Queue worker that processes a `tail` output chunk.
   *
   * @param {String} data 'data' event payload.
   * @param {Function} workDone Fires after work completes.
   */
  Monitor.prototype.dataWorker = function(data, workDone) {
    var monitor = this;

    // If the last 'data' handling resulted in an unparsable chunk,
    // prepend it so that the next extractLines() run (or subsequent one)
    // will receive enough text to complete the line.
    data = this.overflow + data;
    this.overflow = '';

    // Use -v header output to detect tail readiness (for remote invocation).
    // Check startCount to avoid beginning a new restart cycle.
    if (1 === startCount && program.test && data.match(/^==>/)) {
      if (this.source.sshKey) {
        this.saveRemotePid(function() {
          process.send('MONITORS_STARTED');
        });
      } else {
        process.send('MONITORS_STARTED');
      }

      workDone();
      return;
    }

    parsers.extractLines(
      [data],
      this.parser,
      function(line, next) { // Enqueue parsable line for insert.
        monitor.queues.insert.push(line);
        next();
      },
      function(overflow) {  // Extraction attempt complete.
        if (_.size(overflow)) {
          // Append rather than set, in case log line spans multiple 'data' events.
          monitor.overflow += overflow;
        }
      }
    );

    workDone();
  };

  /**
   * Start a new `tail` instance and attach event handlers.
   */
  Monitor.prototype.start = function() {
    // Detect all restarts.
    startCount++;
    if (startCount > 1 && program.test) {
      process.send('MONITOR_RESTART');
    }

    this.log('spawning tail');

    // Detect remote sources.
    if (this.source.sshKey) {
      this.tail = spawn('ssh', this.buildSshCmd(['tail'].concat(this.tailArgs)));
      if (!program.test) {
        this.saveRemotePid();
      }
    } else {
      this.tail = spawn('tail', this.tailArgs);
    }

    var monitor = this;

    // Enqueue `tail` output chunks for line extraction.
    this.tail.stdout.on('data', function(data) {
      monitor.queues.data.push(data.toString());
    });

    // Respond to `tail` exits by restarting.
    this.tail.on('exit', function(code, signal) {
      monitor.log("tail exited with code %d, signal %s", code, signal);

      // Auto-restart.
      monitor.log('restarting');
      monitor.start();
    });

    // Kill `tail` before parent process exits.
    var killTail = function() {
      // To allow a listener count of 0 to indicate that all monitors have been killed
      process.removeListener('END_MONITOR', killTail);

      if (monitor.tail) {
        monitor.mongodb.dbClose();
        monitor.tail.kill('SIGKILL');
        monitor.log('killed local pid %d', monitor.tail.pid);
        monitor.tail = null;

        if (monitor.remotePid) { // Manually kill -- `ssh -t` approach hasn't worked.
          monitor.log('killing remote pid %d ...', monitor.remotePid);
          spawn('ssh', monitor.buildSshCmd(['kill -9 ' + monitor.remotePid]));
          monitor.log('killed remote pid %d', monitor.remotePid);
          monitor.remotePid = null;
        }
      }

      if (program.test) {
        // All monitors have invoked killTail() and sent a kill signal to their
        // remote tail processes.
        if (!process.listeners('END_MONITOR').length) {
          process.send('MONITORS_ENDED');
        }
      }
    };
    process.on('END_MONITOR', killTail);

    this.log('local pid %d', this.tail.pid);
  };

  /**
   * Seed initial `tail` set based on config/app.js 'sources' list.
   */
  var startAllMonitors = function() {
    var maxListeners = config.sources.length;

    if (program.test) {   // Tests add 'message' and 'exit' listeners.
      maxListeners += 2;
    }

    // Avoid EventEmitter mem leak false alarms about count > 10.
    process.setMaxListeners(maxListeners);

    _.each(config.sources, function(source) {
      (new Monitor(source)).start();
    });
  };

  /**
   * Trigger monitors to clean up their `tail` instances.
   */
  var endAllMonitors = function() {
    // Trigger each monitor to call killTail().
    process.emit('END_MONITOR');
  };
  process.on('exit', endAllMonitors);
  process.on('SIGINT', function() {
    procLog('SIGINT received');
    process.exit();
  });
  process.on('SIGTERM', function() {
    procLog('SIGTERM received');
    process.exit();
  });
  process.on('uncaughtException', function(err) {
    procLog('uncaught exception: %s', err.stack ? err.stack : '');
    process.exit();
  });

  // Test mode -- wait until instructed by parent process.
  if (program.test) {
    process.on('message', function(message) {
      if ('START_TEST' === message) {
        startAllMonitors();
      } else if ('END_TEST' === message) {
        process.exit();
      }
    });
  // Normal mode -- start immediately.
  } else {
    startAllMonitors();
  }
})();
